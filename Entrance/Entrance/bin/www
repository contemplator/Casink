#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Entrance:server');
var http = require('http');

var socketio = require('socket.io');
var SerialPort = require("serialport").SerialPort;
var socketServer;
var serialPort;
var portName = '/dev/tty.usbmodem1421'; //change this to your Arduino port
var sendData = "";

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

initSocketIO(server, debug);
serialListener(debug);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function initSocketIO(httpServer,debug){
  socketServer = socketio.listen(httpServer);
  if(debug == false){
    socketServer.set('log level', 1); // socket IO debug off
  }
  socketServer.on('connection', function (socket) {
    console.log("user connected");
    // receive value from arduino
    // socketServer.on('update', function(data) {
    //   socket.emit('updateData',{fromArduino:data}); // send data on the updateDate channel
    // });
    // send value to arduino
    socket.on('sendArduino', function(data) {
      console.log(data);
      serialPort.write("#"+data+"$");
    });
  });
}

// Listen to serial port, read data from arduino 
function serialListener(debug){
  var receivedData = "";
  serialPort = new SerialPort(portName, {
    baudrate: 9600,
    dataBits: 8,
    parity: 'none',
    stopBits: 1,
    flowControl: false
  });

  serialPort.on("open", function () {
    console.log('open serial communication');
    // Listens to incoming data
    serialPort.on('data', function(data) {
      receivedData = data.toString();
      socketServer.emit('update', {fromArduino:receivedData});
      console.log(receivedData);
    });
  });
}
